"use client";

import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { 
  themes, 
  Theme, 
  LayoutSettings, 
  LayoutSettings as LayoutSettingsComponent, 
  LivePreview
} from '../../../components/DesignSystem';
import { Card, CardHeader, CardBody, CardTitle, CardSubtitle } from '../../../components/design-system';
import { LoadingSpinner, ErrorState } from '../../../components/ui/LoadingStates';

interface Params {
  restaurantId: string;
  [key: string]: string | string[];
}

interface DesignSettings {
  theme: Theme;
  layout: LayoutSettings;
}

const DesignSettingsPage = () => {
  const params = useParams<Params>();
  const restaurantId = params?.restaurantId;

  const [settings, setSettings] = useState<DesignSettings>({
    theme: themes[0], // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    layout: {
      borderRadius: 'medium',
      padding: 'normal',
      shadow: 'normal',
      fontFamily: 'inter'
    }
  });

  const [selectedThemeId, setSelectedThemeId] = useState<string>('default');

  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ API
  useEffect(() => {
    const loadSettings = async () => {
      if (!restaurantId) return;
      
      try {
        const response = await fetch(`/api/restaurants/${restaurantId}/design-settings`);
        if (response.ok) {
          const data = await response.json();
          setSettings({
            theme: themes.find(t => t.id === data.theme.id) || themes[0],
            layout: data.layout
          });
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadSettings();
  }, [restaurantId]);


  const handleThemeChange = (theme: Theme) => {
    setSettings(prev => ({ ...prev, theme }));
    // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–µ–º–∏
    saveSettings({ ...settings, theme });
  };

  const handleThemeSelectChange = (themeId: string) => {
    setSelectedThemeId(themeId);
    const selectedTheme = themes.find(t => t.id === themeId);
    if (selectedTheme) {
      handleThemeChange(selectedTheme);
    }
  };

  const saveSettings = async (newSettings: DesignSettings) => {
    if (!restaurantId) return;
    
    try {
      const response = await fetch(`/api/restaurants/${restaurantId}/design-settings`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          theme: {
            id: newSettings.theme.id,
            name: newSettings.theme.name,
            colors: newSettings.theme.colors
          },
          layout: newSettings.layout
        }),
      });

      if (response.ok) {
        console.log('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
    }
  };

  const handleLayoutChange = (layout: LayoutSettings) => {
    const newSettings = { ...settings, layout };
    setSettings(newSettings);
    // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞–∫–µ—Ç—É
    saveSettings(newSettings);
  };


  if (!restaurantId) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ErrorState 
          title="–ü–æ–º–∏–ª–∫–∞"
          message="ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
          onRetry={() => window.location.reload()}
        />
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner 
          size="lg" 
          text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–∏–∑–∞–π–Ω—É..." 
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="ds-mb-8">
          <h1 className="ds-text-3xl ds-font-bold ds-text-gray-900 ds-mb-6">
            –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É
          </h1>
        </div>
        {/* –ì–æ—Ç–æ–≤—ñ —Ç–µ–º–∏ */}
        <Card className="ds-mb-8">
          <CardHeader>
            <CardTitle>üé® –ì–æ—Ç–æ–≤—ñ —Ç–µ–º–∏</CardTitle>
            <CardSubtitle>–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –≤–∞—à–æ–≥–æ –º–µ–Ω—é</CardSubtitle>
          </CardHeader>
          <CardBody>
            <div className="ds-grid ds-grid-cols-2 ds-md:grid-cols-3 ds-lg:grid-cols-5 ds-gap-4">
              {themes.map((theme) => (
                <button
                  key={theme.id}
                  onClick={() => handleThemeSelectChange(theme.id)}
                  className={`ds-p-4 ds-rounded-lg ds-border-2 ds-transition-all ds-text-center ${
                    selectedThemeId === theme.id 
                      ? 'ds-border-primary ds-bg-primary ds-bg-opacity-10' 
                      : 'ds-border-gray-200 ds-bg-white hover:ds-border-gray-300'
                  }`}
                >
                  <div className="ds-text-2xl ds-mb-2">{theme.preview}</div>
                  <div className="ds-text-sm ds-font-medium ds-text-gray-900">
                    {theme.name}
                  </div>
                </button>
              ))}
            </div>
          </CardBody>
        </Card>

        {/* Live –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ */}
        <div className="ds-mb-8">
          <div className="ds-mb-6">
            <h2 className="ds-text-xl ds-font-semibold ds-text-gray-900 ds-mb-2">
              –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–Ω—é
            </h2>
            <p className="ds-text-gray-600">
              –Ø–∫ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –≤–∞—à–µ –º–µ–Ω—é –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            </p>
          </div>
          
          <LivePreview
            theme={settings.theme}
            layoutSettings={settings.layout}
            restaurantId={restaurantId}
          />
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="ds-grid ds-grid-cols-1 ds-gap-8">
          {/* –õ—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
          <div className="ds-space-y-8">
          </div>

          {/* –ü—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó */}
          <div className="ds-space-y-8">
            {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É */}
            <LayoutSettingsComponent
              settings={settings.layout}
              onChange={handleLayoutChange}
            />

            {/* –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó 
            <div className="ds-card ds-card-body">
              <h3 className="ds-text-lg ds-font-semibold ds-text-gray-900 ds-mb-4">
                –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
              </h3>
              <div className="ds-space-y-3 ds-text-sm ds-text-gray-600">
                <p>‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ</p>
                <p>‚Ä¢ –û–±–º–µ–∂—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–æ 3-4 –æ—Å–Ω–æ–≤–Ω–∏—Ö</p>
                <p>‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏–≥–ª—è–¥ –º–µ–Ω—é –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö</p>
                <p>‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å —É –¥–∏–∑–∞–π–Ω—ñ</p>
                <p>‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤</p>
              </div>
            </div>*/}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DesignSettingsPage;
