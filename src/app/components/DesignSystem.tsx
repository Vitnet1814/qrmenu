'use client';

import React, { useState, useEffect } from 'react';

export interface Theme {
  id: string;
  name: string;
  description: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    background: string;
    surface: string;
    text: string;
  };
  preview: string;
  category: 'restaurant' | 'cafe' | 'fast-food' | 'bar' | 'modern' | 'premium';
}

export interface LayoutSettings {
  borderRadius: 'minimal' | 'medium' | 'large';
  padding: 'compact' | 'normal' | 'spacious';
  shadow: 'minimal' | 'normal' | 'dramatic';
  fontFamily: 'inter' | 'roboto' | 'opensans' | 'lato' | 'montserrat' | 'poppins' | 'nunito' | 'playfair' | 'merriweather' | 'crimson' | 'libre' | 'source';
}

export interface ColorPickerProps {
  colors: Theme['colors'];
  onChange: (colors: Theme['colors']) => void;
}

export interface LayoutSettingsProps {
  settings: LayoutSettings;
  onChange: (settings: LayoutSettings) => void;
}

export interface LivePreviewProps {
  theme: Theme;
  layoutSettings: LayoutSettings;
  restaurantId?: string;
}

export interface DesignTipsProps {
  theme: Theme;
}

// –ì–æ—Ç–æ–≤—ñ —Ç–µ–º–∏
export const themes: Theme[] = [
  {
    id: 'default',
    name: '–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º',
    description: '–ë–∞–∑–æ–≤–∞ —Ç–µ–º–∞ –∑ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É –∑–∞–∫–ª–∞–¥—É',
    colors: {
      primary: '#2563eb',
      secondary: '#64748b',
      accent: '#f59e0b',
      background: '#f8fafc',
      surface: '#ffffff',
      text: '#1e293b'
    },
    preview: 'üé®',
    category: 'modern'
  },
  {
    id: 'classic-restaurant',
    name: '–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
    description: '–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ —Ç–µ–º–∞ –∑ —Ç–µ–ø–ª–∏–º–∏ –∫–æ—Ä–∏—á–Ω–µ–≤–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –¥–ª—è –∫–ª–∞—Å–∏—á–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤',
    colors: {
      primary: '#8b4513',
      secondary: '#d2691e',
      accent: '#daa520',
      background: '#f5e6d3',
      surface: '#ffffff',
      text: '#2c1810'
    },
    preview: 'üçΩÔ∏è',
    category: 'restaurant'
  },
  {
    id: 'cozy-cafe',
    name: '–ó–∞—Ç–∏—à–Ω–µ –∫–∞—Ñ–µ',
    description: '–¢–µ–ø–ª–∞ —Ç–∞ –∑–∞—Ç–∏—à–Ω–∞ —Ç–µ–º–∞ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –∫–∞—Ñ–µ',
    colors: {
      primary: '#6b4423',
      secondary: '#d4af37',
      accent: '#c9a96e',
      background: '#f4f1eb',
      surface: '#ffffff',
      text: '#2c1810'
    },
    preview: '‚òï',
    category: 'cafe'
  },
  {
    id: 'fast-food',
    name: '–§–∞—Å—Ç-—Ñ—É–¥',
    description: '–Ø—Å–∫—Ä–∞–≤–∞ —Ç–∞ –µ–Ω–µ—Ä–≥—ñ–π–Ω–∞ —Ç–µ–º–∞ –∑ —á–µ—Ä–≤–æ–Ω–∏–º–∏ —Ç–∞ –∂–æ–≤—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#ff6b35',
      secondary: '#ffd23f',
      accent: '#ff1744',
      background: '#ffe8e0',
      surface: '#ffffff',
      text: '#2c1810'
    },
    preview: 'üçî',
    category: 'fast-food'
  },
  {
    id: 'sushi-bar',
    name: '–°—É—à–∏-–±–∞—Ä',
    description: '–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ —Ç–µ–º–∞ –∑ –∑–µ–ª–µ–Ω–∏–º–∏ —Ç–∞ —á–µ—Ä–≤–æ–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#2c5530',
      secondary: '#ff6b6b',
      accent: '#4ecdc4',
      background: '#e8f5e8',
      surface: '#ffffff',
      text: '#1a2e1a'
    },
    preview: 'üç£',
    category: 'bar'
  },
  {
    id: 'pizzeria',
    name: '–ü—ñ—Ü–µ—Ä—ñ—è',
    description: '–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ —Ç–µ–º–∞ –∑ —á–µ—Ä–≤–æ–Ω–∏–º–∏, –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–º–∏ —Ç–∞ –∑–µ–ª–µ–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏',
    colors: {
      primary: '#d32f2f',
      secondary: '#ff9800',
      accent: '#4caf50',
      background: '#ffebee',
      surface: '#ffffff',
      text: '#2c1810'
    },
    preview: 'üçï',
    category: 'restaurant'
  },
  {
    id: 'modern',
    name: '–ú–æ–¥–µ—Ä–Ω',
    description: '–°—É—á–∞—Å–Ω–∞ —Ç–µ–º–∞ –∑ —Å–∏–Ω—ñ–º–∏ —Ç–∞ —Å—ñ—Ä–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤',
    colors: {
      primary: '#1976d2',
      secondary: '#424242',
      accent: '#ff4081',
      background: '#e3f2fd',
      surface: '#ffffff',
      text: '#333333'
    },
    preview: 'üè¢',
    category: 'modern'
  },
  {
    id: 'dark',
    name: '–¢–µ–º–Ω–∞ —Ç–µ–º–∞',
    description: '–°—Ç–∏–ª—å–Ω–∞ —Ç–µ–º–Ω–∞ —Ç–µ–º–∞ –∑ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–º–∏ —Ç–∞ –±–ª–∞–∫–∏—Ç–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#bb86fc',
      secondary: '#03dac6',
      accent: '#cf6679',
      background: '#121212',
      surface: '#1e1e1e',
      text: '#ffffff'
    },
    preview: 'üåô',
    category: 'modern'
  },
  {
    id: 'spring',
    name: '–í–µ—Å–Ω—è–Ω–∞ —Ç–µ–º–∞',
    description: '–°–≤—ñ–∂–∞ —Ç–∞ –∂–∏—Ç—Ç—î—Ä–∞–¥—ñ—Å–Ω–∞ —Ç–µ–º–∞ –∑ –∑–µ–ª–µ–Ω–∏–º–∏ —Ç–∞ –∂–æ–≤—Ç–∏–º–∏ —Ç–æ–Ω–∞–º–∏',
    colors: {
      primary: '#4caf50',
      secondary: '#81c784',
      accent: '#ffb74d',
      background: '#e8f5e8',
      surface: '#ffffff',
      text: '#1a2e1a'
    },
    preview: 'üå∏',
    category: 'cafe'
  },
  {
    id: 'premium',
    name: '–ü—Ä–µ–º—ñ—É–º',
    description: '–†–æ–∑–∫—ñ—à–Ω–∞ —Ç–µ–º–∞ –∑ —á–æ—Ä–Ω–∏–º–∏ —Ç–∞ –∑–æ–ª–æ—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∑–∞–∫–ª–∞–¥—ñ–≤',
    colors: {
      primary: '#1a1a1a',
      secondary: '#c9a96e',
      accent: '#d4af37',
      background: '#f5f5f5',
      surface: '#ffffff',
      text: '#2c1810'
    },
    preview: 'üëë',
    category: 'premium'
  }
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ColorPicker
export const ColorPicker: React.FC<ColorPickerProps> = ({ colors, onChange }) => {
  const [localColors, setLocalColors] = useState(colors);
  const [activeColorKey, setActiveColorKey] = useState<keyof Theme['colors']>('primary');

  const handleColorChange = (colorKey: keyof Theme['colors'], value: string) => {
    const newColors = { ...localColors, [colorKey]: value };
    setLocalColors(newColors);
    onChange(newColors);
  };

  const colorLabels = {
    primary: '–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä',
    secondary: '–î—Ä—É–≥–æ—Ä—è–¥–Ω–∏–π –∫–æ–ª—ñ—Ä',
    accent: '–ê–∫—Ü–µ–Ω—Ç–Ω–∏–π –∫–æ–ª—ñ—Ä',
    background: '–ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É',
    surface: '–ö–æ–ª—ñ—Ä –ø–æ–≤–µ—Ä—Ö–Ω—ñ',
    text: '–ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É'
  };

  const predefinedColors = [
    '#8b4513', '#d2691e', '#daa520', '#6b4423', '#d4af37', '#c9a96e',
    '#ff6b35', '#ffd23f', '#ff1744', '#2c5530', '#ff6b6b', '#4ecdc4',
    '#d32f2f', '#ff9800', '#4caf50', '#1976d2', '#424242', '#ff4081',
    '#bb86fc', '#03dac6', '#cf6679', '#4caf50', '#81c784', '#ffb74d',
    '#1a1a1a', '#c9a96e', '#d4af37', '#2563eb', '#64748b', '#f59e0b'
  ];

  return (
    <div className="space-y-6">
      {/* –í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */}
      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-3">
          –û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:
        </h4>
        <div className="grid grid-cols-3 gap-2">
          {Object.entries(colorLabels).map(([key, label]) => (
            <button
              key={key}
              className={`px-3 py-2 text-sm font-medium rounded-md border transition-colors ${
                activeColorKey === key
                  ? 'bg-blue-500 text-white border-blue-500'
                  : 'bg-white text-gray-700 border-gray-300'
              }`}
              onClick={() => setActiveColorKey(key as keyof Theme['colors'])}
            >
              <div className="flex items-center gap-2">
                <div
                  className="w-4 h-4 rounded border border-gray-300"
                  style={{ backgroundColor: localColors[key as keyof Theme['colors']] }}
                />
                <span className="text-xs">{label}</span>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–ª—ñ—Ä */}
      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-3">
          –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–ª—ñ—Ä ({colorLabels[activeColorKey]}):
        </h4>
        <div className="flex items-center gap-4">
          <div
            className="w-16 h-16 rounded-lg border-2 border-gray-300 shadow-sm"
            style={{ backgroundColor: localColors[activeColorKey] }}
          />
          <div className="flex-1">
            <input
              type="text"
              value={localColors[activeColorKey]}
              onChange={(e) => handleColorChange(activeColorKey, e.target.value)}
              className="w-full px-3 py-2 text-sm font-mono border border-gray-300 rounded-md bg-white text-gray-900"
              placeholder="#000000"
            />
            <p className="text-xs text-gray-500 mt-1">
              –í–≤–µ–¥—ñ—Ç—å HEX –∫–æ–¥ –∫–æ–ª—å–æ—Ä—É
            </p>
          </div>
        </div>
      </div>

      {/* Color picker input */}
      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-3">
          –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:
        </h4>
        <input
          type="color"
          value={localColors[activeColorKey]}
          onChange={(e) => handleColorChange(activeColorKey, e.target.value)}
          className="w-full h-12 rounded-lg border border-gray-300 cursor-pointer"
        />
      </div>

      {/* –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ */}
      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-3">
          –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –∫–æ–ª—å–æ—Ä–∏:
        </h4>
        <div className="grid grid-cols-6 gap-2">
          {predefinedColors.map((color, index) => (
            <button
              key={index}
              className="w-8 h-8 rounded border border-gray-300 shadow-sm transition-transform"
              style={{ backgroundColor: color }}
              onClick={() => handleColorChange(activeColorKey, color)}
              title={color}
            />
          ))}
        </div>
      </div>

      {/* –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ */}
      <div>
        <h4 className="text-sm font-medium text-gray-700 mb-3">
          –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:
        </h4>
        <div 
          className="p-4 rounded-lg border border-gray-300"
          style={{ backgroundColor: localColors.background }}
        >
          <div className="flex gap-2 mb-3">
            <div
              className="px-3 py-1 rounded text-sm text-white font-medium"
              style={{ backgroundColor: localColors.primary }}
            >
              –û—Å–Ω–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
            </div>
            <div
              className="px-3 py-1 rounded text-sm text-white font-medium"
              style={{ backgroundColor: localColors.secondary }}
            >
              –î—Ä—É–≥–æ—Ä—è–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
            </div>
            <div
              className="px-3 py-1 rounded text-sm text-white font-medium"
              style={{ backgroundColor: localColors.accent }}
            >
              –ê–∫—Ü–µ–Ω—Ç–Ω–∞ –∫–Ω–æ–ø–∫–∞
            </div>
          </div>
          
          <div 
            className="p-3 rounded mb-3"
            style={{ backgroundColor: localColors.surface }}
          >
            <p 
              className="text-sm font-medium mb-1"
              style={{ color: localColors.text }}
            >
              –ü—Ä–∏–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω—ñ
            </p>
            <p 
              className="text-xs"
              style={{ color: localColors.text }}
            >
              –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–ª—å–æ—Ä—É —Ç–µ–∫—Å—Ç—É
            </p>
          </div>
          
          <div className="flex gap-2">
            {Object.entries(localColors).map(([key, color]) => (
              <div
                key={key}
                className="w-6 h-6 rounded border border-gray-300"
                style={{ backgroundColor: color }}
                title={`${key}: ${color}`}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç LayoutSettings
export const LayoutSettings: React.FC<LayoutSettingsProps> = ({ settings, onChange }) => {
  const [localSettings, setLocalSettings] = useState<LayoutSettings>(settings);

  const handleSettingChange = <K extends keyof LayoutSettings>(
    key: K,
    value: LayoutSettings[K]
  ) => {
    const newSettings = { ...localSettings, [key]: value };
    setLocalSettings(newSettings);
    onChange(newSettings);
  };

  const borderRadiusOptions = [
    { value: 'minimal' as const, label: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ' },
    { value: 'medium' as const, label: '–°–µ—Ä–µ–¥–Ω—î' },
    { value: 'large' as const, label: '–í–µ–ª–∏–∫–µ' }
  ];

  const paddingOptions = [
    { value: 'compact' as const, label: '–ö–æ–º–ø–∞–∫—Ç–Ω—ñ' },
    { value: 'normal' as const, label: '–ó–≤–∏—á–∞–π–Ω—ñ' },
    { value: 'spacious' as const, label: '–í–µ–ª–∏–∫—ñ' }
  ];

  const shadowOptions = [
    { value: 'minimal' as const, label: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ' },
    { value: 'normal' as const, label: '–ó–≤–∏—á–∞–π–Ω—ñ' },
    { value: 'dramatic' as const, label: '–î—Ä–∞–º–∞—Ç–∏—á–Ω—ñ' }
  ];

  const fontOptions = [
    { value: 'inter' as const, label: 'Inter' },
    { value: 'roboto' as const, label: 'Roboto' },
    { value: 'opensans' as const, label: 'Open Sans' },
    { value: 'lato' as const, label: 'Lato' },
    { value: 'montserrat' as const, label: 'Montserrat' },
    { value: 'poppins' as const, label: 'Poppins' },
    { value: 'nunito' as const, label: 'Nunito' },
    { value: 'playfair' as const, label: 'Playfair Display' },
    { value: 'merriweather' as const, label: 'Merriweather' },
    { value: 'crimson' as const, label: 'Crimson Text' },
    { value: 'libre' as const, label: 'Libre Baskerville' },
    { value: 'source' as const, label: 'Source Serif Pro' }
  ];


  return (
    <div className="ds-card ds-card-body ds-space-y-6">
      <h3 className="ds-text-lg ds-font-semibold ds-text-gray-900 ds-mb-4">
        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç—É
      </h3>

      {/* –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—É—Ç—ñ–≤ */}
      <div className="ds-flex ds-items-center ds-justify-between ds-gap-4">
        <h4 className="ds-text-sm ds-font-medium ds-text-gray-700 ds-flex-shrink-0">
          –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—É—Ç—ñ–≤:
        </h4>
        <select
          value={localSettings.borderRadius}
          onChange={(e) => handleSettingChange('borderRadius', e.target.value as LayoutSettings['borderRadius'])}
          className="ds-flex-1 ds-px-4 ds-py-3 ds-border ds-border-gray-300 ds-rounded-lg ds-bg-white ds-text-gray-900 ds-focus:outline-none ds-focus:ring-2 ds-focus:ring-blue-500 ds-focus:border-transparent"
        >
          {borderRadiusOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* –í—ñ–¥—Å—Ç—É–ø–∏ */}
      <div className="ds-flex ds-items-center ds-justify-between ds-gap-4">
        <h4 className="ds-text-sm ds-font-medium ds-text-gray-700 ds-flex-shrink-0">
          –í—ñ–¥—Å—Ç—É–ø–∏:
        </h4>
        <select
          value={localSettings.padding}
          onChange={(e) => handleSettingChange('padding', e.target.value as LayoutSettings['padding'])}
          className="ds-flex-1 ds-px-4 ds-py-3 ds-border ds-border-gray-300 ds-rounded-lg ds-bg-white ds-text-gray-900 ds-focus:outline-none ds-focus:ring-2 ds-focus:ring-blue-500 ds-focus:border-transparent"
        >
          {paddingOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* –¢—ñ–Ω—ñ */}
      <div className="ds-flex ds-items-center ds-justify-between ds-gap-4">
        <h4 className="ds-text-sm ds-font-medium ds-text-gray-700 ds-flex-shrink-0">
          –¢—ñ–Ω—ñ:
        </h4>
        <select
          value={localSettings.shadow}
          onChange={(e) => handleSettingChange('shadow', e.target.value as LayoutSettings['shadow'])}
          className="ds-flex-1 ds-px-4 ds-py-3 ds-border ds-border-gray-300 ds-rounded-lg ds-bg-white ds-text-gray-900 ds-focus:outline-none ds-focus:ring-2 ds-focus:ring-blue-500 ds-focus:border-transparent"
        >
          {shadowOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* –®—Ä–∏—Ñ—Ç–∏ */}
      <div className="ds-flex ds-items-center ds-justify-between ds-gap-4">
        <h4 className="ds-text-sm ds-font-medium ds-text-gray-700 ds-flex-shrink-0">
          –®—Ä–∏—Ñ—Ç–∏:
        </h4>
        <select
          value={localSettings.fontFamily}
          onChange={(e) => handleSettingChange('fontFamily', e.target.value as LayoutSettings['fontFamily'])}
          className="ds-flex-1 ds-px-4 ds-py-3 ds-border ds-border-gray-300 ds-rounded-lg ds-bg-white ds-text-gray-900 ds-focus:outline-none ds-focus:ring-2 ds-focus:ring-blue-500 ds-focus:border-transparent"
        >
          {fontOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç LivePreview
export const LivePreview: React.FC<LivePreviewProps> = ({ 
  theme, 
  layoutSettings,
  restaurantId
}) => {
  const [restaurantData, setRestaurantData] = useState<{
    name: string, 
    banner?: string,
    description?: string,
    categories?: Array<{name: string, items: Array<{name: string, price: number, description?: string, image?: string}>}>
  } | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ API
  useEffect(() => {
    const loadRestaurantData = async () => {
      if (!restaurantId) {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î restaurantId, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–∞–Ω—ñ
        setRestaurantData({
          name: '–ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É',
          description: '–†–µ—Å—Ç–æ—Ä–∞–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∫—É—Ö–Ω—ñ',
          banner: undefined,
          categories: [
            {
              name: '–ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏',
              items: [
                { name: '–ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π', price: 120, description: '–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ä—â –∑—ñ —Å–º–µ—Ç–∞–Ω–æ—é —Ç–∞ –∑–µ–ª–µ–Ω–Ω—é' },
                { name: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é', price: 95, description: '–î–æ–º–∞—à–Ω—ñ –≤–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é —Ç–∞ —Ü–∏–±—É–ª–µ—é' }
              ]
            }
          ]
        });
        return;
      }

      setIsLoading(true);
      try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –æ–¥–Ω–∏–º API –∑–∞–ø–∏—Ç–æ–º
        const response = await fetch(`/api/menu-preview/${restaurantId}`);
        
        if (!response.ok) {
          throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É');
        }

        const data = await response.json();
        
        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        setRestaurantData({
          name: data.restaurant?.name || '–ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É',
          description: '–†–µ—Å—Ç–æ—Ä–∞–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∫—É—Ö–Ω—ñ',
          banner: data.banner?.image,
          categories: data.categories?.length > 0 ? data.categories.map((cat: any) => ({
            name: cat.name,
            items: cat.items?.map((item: any) => ({
              name: item.name,
              price: item.price,
              description: item.description,
              image: item.image
            })) || []
          })) : [
            {
              name: '–ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏',
              items: [
                { name: '–ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π', price: 120, description: '–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ä—â –∑—ñ —Å–º–µ—Ç–∞–Ω–æ—é —Ç–∞ –∑–µ–ª–µ–Ω–Ω—é' },
                { name: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é', price: 95, description: '–î–æ–º–∞—à–Ω—ñ –≤–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é —Ç–∞ —Ü–∏–±—É–ª–µ—é' }
              ]
            }
          ]
        });
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É:', error);
        // Fallback –¥–æ –º–æ–∫ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        setRestaurantData({
          name: '–ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É',
          description: '–†–µ—Å—Ç–æ—Ä–∞–Ω —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∫—É—Ö–Ω—ñ',
          banner: undefined,
          categories: [
            {
              name: '–ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏',
              items: [
                { name: '–ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π', price: 120, description: '–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ä—â –∑—ñ —Å–º–µ—Ç–∞–Ω–æ—é —Ç–∞ –∑–µ–ª–µ–Ω–Ω—é' },
                { name: '–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é', price: 95, description: '–î–æ–º–∞—à–Ω—ñ –≤–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é —Ç–∞ —Ü–∏–±—É–ª–µ—é' }
              ]
            }
          ]
        });
      } finally {
        setIsLoading(false);
      }
    };

    loadRestaurantData();
  }, [restaurantId]);

  const getBorderRadiusClass = (value: LayoutSettings['borderRadius']) => {
    switch (value) {
      case 'minimal': return 'ds-rounded-sm';
      case 'medium': return 'ds-rounded-md';
      case 'large': return 'ds-rounded-lg';
      default: return 'ds-rounded-md';
    }
  };

  const getPaddingClass = (value: LayoutSettings['padding']) => {
    switch (value) {
      case 'compact': return 'ds-p-2';
      case 'normal': return 'ds-p-4';
      case 'spacious': return 'ds-p-6';
      default: return 'ds-p-4';
    }
  };

  const getShadowClass = (value: LayoutSettings['shadow']) => {
    switch (value) {
      case 'minimal': return 'ds-shadow-sm';
      case 'normal': return 'ds-shadow-md';
      case 'dramatic': return 'ds-shadow-lg';
      default: return 'ds-shadow-md';
    }
  };

  const getFontFamilyClass = (value: LayoutSettings['fontFamily']) => {
    switch (value) {
      case 'inter': return 'font-inter';
      case 'roboto': return 'font-roboto';
      case 'opensans': return 'font-open-sans';
      case 'lato': return 'font-lato';
      case 'montserrat': return 'font-montserrat';
      case 'poppins': return 'font-poppins';
      case 'nunito': return 'font-nunito';
      case 'playfair': return 'font-playfair';
      case 'merriweather': return 'font-merriweather';
      case 'crimson': return 'font-crimson';
      case 'libre': return 'font-libre';
      case 'source': return 'font-source';
      default: return 'font-inter';
    }
  };

  const borderRadiusClass = getBorderRadiusClass(layoutSettings.borderRadius);
  const paddingClass = getPaddingClass(layoutSettings.padding);
  const shadowClass = getShadowClass(layoutSettings.shadow);
  const fontFamilyClass = getFontFamilyClass(layoutSettings.fontFamily);

  if (isLoading) {
    return (
      <div className={`ds-card ds-card-body ${fontFamilyClass}`}>
        <div className="ds-flex ds-items-center ds-justify-center ds-py-12">
          <div className="ds-text-center">
            <div className="ds-animate-spin ds-rounded-full ds-h-8 ds-w-8 ds-border-b-2 ds-border-primary ds-mx-auto ds-mb-4"></div>
            <p className="ds-text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`ds-card ds-flex ds-justify-center ds-items-start ds-py-8 ${fontFamilyClass}`}>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –µ–º—É–ª—è—Ü—ñ—î—é —Ç–µ–ª–µ—Ñ–æ–Ω—É */}
      <div 
        className="ds-relative phone-container"
        style={{
          width: '350px',
          height: '700px',
          minWidth: '350px',
          maxWidth: '100%'
        }}
      >
        {/* –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è frame –ø–æ–≤–µ—Ä—Ö –≤—Å—å–æ–≥–æ */}
        <img 
          src="/phone-frame.png" 
          alt="Phone frame" 
          className="ds-absolute ds-top-0 ds-left-0 ds-w-full ds-h-full ds-pointer-events-none ds-z-10"
          draggable={false}
          style={{ objectFit: 'contain' }}
        />
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É —Ç–µ–ª–µ—Ñ–æ–Ω—É */}
        <div 
          className="ds-absolute ds-flex ds-flex-col phone-content"
          style={{
            top: '50px',    // –ø—ñ–¥–≥–æ–Ω–∫–∞ –ø—ñ–¥ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –µ–∫—Ä–∞–Ω—É –≤ frame
            left: '20px',
            width: '310px',
            height: '600px',
            zIndex: 1
          }}
        >
          {/* –°–∫—Ä–æ–ª–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <div 
            className="ds-flex-1 ds-overflow-y-auto"
            style={{
              scrollbarWidth: 'none',
              msOverflowStyle: 'none',
              WebkitScrollbar: { display: 'none' }
            } as React.CSSProperties}
          >
            <style jsx>{`
              div::-webkit-scrollbar {
                display: none;
              }
              @media (max-width: 420px) {
                :global(.phone-container) {
                  width: 280px !important;
                  height: 560px !important;
                  min-width: 280px !important;
                }
                :global(.phone-content) {
                  top: 40px !important;
                  left: 16px !important;
                  width: 248px !important;
                  height: 480px !important;
                }
                :global(.phone-content h1) {
                  font-size: 1rem !important;
                }
                :global(.phone-content h3) {
                  font-size: 0.875rem !important;
                }
                :global(.phone-content h4) {
                  font-size: 0.75rem !important;
                }
                :global(.phone-content p) {
                  font-size: 0.625rem !important;
                }
                :global(.phone-content .ds-text-sm) {
                  font-size: 0.625rem !important;
                }
                :global(.phone-content .ds-text-base) {
                  font-size: 0.75rem !important;
                }
                :global(.phone-content .ds-text-lg) {
                  font-size: 0.875rem !important;
                }
                :global(.phone-content .ds-text-xl) {
                  font-size: 1rem !important;
                }
              }
              @media (max-width: 360px) {
                :global(.phone-container) {
                  width: 240px !important;
                  height: 480px !important;
                  min-width: 240px !important;
                }
                :global(.phone-content) {
                  top: 34px !important;
                  left: 14px !important;
                  width: 212px !important;
                  height: 410px !important;
                }
                :global(.phone-content h1) {
                  font-size: 0.875rem !important;
                }
                :global(.phone-content h3) {
                  font-size: 0.75rem !important;
                }
                :global(.phone-content h4) {
                  font-size: 0.625rem !important;
                }
                :global(.phone-content p) {
                  font-size: 0.5rem !important;
                }
                :global(.phone-content .ds-text-sm) {
                  font-size: 0.5rem !important;
                }
                :global(.phone-content .ds-text-base) {
                  font-size: 0.625rem !important;
                }
                :global(.phone-content .ds-text-lg) {
                  font-size: 0.75rem !important;
                }
                :global(.phone-content .ds-text-xl) {
                  font-size: 0.875rem !important;
                }
              }
            `}</style>
            <div 
              className={`ds-w-full ds-min-h-full ${shadowClass}`}
              style={{ backgroundColor: theme.colors.background }}
            >
          {/* –ë–∞–Ω–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É */}
          {restaurantData?.banner && (
            <div 
              className="ds-w-full ds-h-48 ds-bg-cover ds-bg-center"
              style={{backgroundImage: `url(${restaurantData.banner})`}}
            />
          )}
          
        {/* –ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É */}
        <div 
          className={`ds-text-center ds-py-6 ds-px-4`}
          style={{ 
            background: restaurantData?.banner 
              ? theme.colors.surface
              : `linear-gradient(135deg, ${theme.colors.primary} 0%, ${theme.colors.secondary} 100%)`,
            color: restaurantData?.banner ? theme.colors.text : '#ffffff'
          }}
        >
            <h1 className="ds-text-xl ds-font-bold ds-mb-1">
              {restaurantData?.name || '–ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É'}
            </h1>
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
          <div className={`${paddingClass}`} style={{ backgroundColor: theme.colors.background }}>
            {restaurantData?.categories && restaurantData.categories.length > 0 && (
              <div 
                className="ds-flex ds-gap-2 ds-mb-4 ds-overflow-x-auto" 
                style={{ 
                  scrollbarWidth: 'none', 
                  msOverflowStyle: 'none',
                  WebkitScrollbar: 'none'
                } as React.CSSProperties}
              >
                
                {restaurantData.categories.map((category, index) => (
                  <div 
                    key={category.name}
                    className={`ds-px-4 ds-py-2 ds-text-sm ds-font-medium ds-whitespace-nowrap ${borderRadiusClass} ${shadowClass}`}
                    style={{ 
                      backgroundColor: index === 0 ? theme.colors.primary : theme.colors.surface,
                      color: index === 0 ? '#ffffff' : theme.colors.text,
                      border: index === 0 ? 'none' : `1px solid ${theme.colors.primary}20`
                    }}
                  >
                    {category.name}
                  </div>
                ))}
              </div>
            )}

            {/* –°—Ç—Ä–∞–≤–∏ */}
            <div className="ds-space-y-4">
              {restaurantData?.categories && restaurantData.categories.length > 0 ? (
                restaurantData.categories.map((category, categoryIndex) => (
                  <div key={category.name} className="ds-space-y-3">
                    {/* –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
                    <h3 
                      className="ds-text-lg ds-font-semibold ds-text-center"
                      style={{ color: theme.colors.text }}
                    >
                      {category.name}
                    </h3>
                    
                    {/* –°—Ç—Ä–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
                    {category.items && category.items.length > 0 ? (
                      category.items.map((item, itemIndex) => (
                      <div 
                        key={`${category.name}-${item.name}`}
                        className={`${borderRadiusClass} ${shadowClass} ds-overflow-hidden`}
                        style={{ 
                          backgroundColor: theme.colors.surface,
                          border: `1px solid ${theme.colors.primary}10` 
                        }}
                      >
                        {/* –§–æ—Ç–æ —Å—Ç—Ä–∞–≤–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
                        {item.image && (
                          <img 
                            src={item.image} 
                            alt={item.name}
                            className="ds-w-full ds-h-32 ds-object-cover"
                          />
                        )}
                        
                        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—Ä–∞–≤—É */}
                        <div className={paddingClass}>
                          <div className="ds-flex ds-justify-between ds-items-start ds-mb-2">
                            <h4 
                              className="ds-text-base ds-font-semibold ds-flex-1"
                              style={{ color: theme.colors.text }}
                            >
                              {item.name}
                            </h4>
                            <div 
                              className="ds-text-lg ds-font-bold ds-ml-2"
                              style={{ color: theme.colors.primary }}
                            >
                              {item.price}‚Ç¥
                            </div>
                          </div>
                          {item.description && (
                            <p 
                              className="ds-text-sm"
                              style={{ color: theme.colors.text, opacity: 0.7 }}
                            >
                              {item.description}
                            </p>
                          )}
                        </div>
                      </div>
                      ))
                    ) : (
                      <div 
                        className={`${borderRadiusClass} ${paddingClass}`}
                        style={{ 
                          backgroundColor: theme.colors.background,
                          border: `1px solid ${theme.colors.primary}10` 
                        }}
                      >
                        <p 
                          className="ds-text-sm ds-text-center"
                          style={{ color: theme.colors.text, opacity: 0.6 }}
                        >
                          –ù–µ–º–∞—î —Å—Ç—Ä–∞–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                        </p>
                      </div>
                    )}
                  </div>
                ))
              ) : (
                // Fallback –º–æ–∫ –¥–∞–Ω—ñ
                <div className="ds-space-y-3">
                  <h3 
                    className="ds-text-lg ds-font-semibold ds-text-center"
                    style={{ color: theme.colors.text }}
                  >
                    –ì–∞—Ä—è—á—ñ —Å—Ç—Ä–∞–≤–∏
                  </h3>
                  <div 
                    className={`${borderRadiusClass} ${paddingClass} ${shadowClass}`}
                    style={{ 
                      backgroundColor: theme.colors.surface,
                      border: `1px solid ${theme.colors.primary}10` 
                    }}
                  >
                    <div className="ds-flex ds-justify-between ds-items-start ds-mb-2">
                      <div className="ds-flex-1">
                        <h4 
                          className="ds-text-base ds-font-semibold ds-mb-1"
                          style={{ color: theme.colors.text }}
                        >
                          –ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π
                        </h4>
                        <p 
                          className="ds-text-sm ds-mb-2"
                          style={{ color: theme.colors.text, opacity: 0.7 }}
                        >
                          –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±–æ—Ä—â –∑—ñ —Å–º–µ—Ç–∞–Ω–æ—é —Ç–∞ –∑–µ–ª–µ–Ω–Ω—é
                        </p>
                      </div>
                      <div 
                        className="ds-text-lg ds-font-bold ds-ml-2"
                        style={{ color: theme.colors.primary }}
                      >
                        120‚Ç¥
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –§—É—Ç–µ—Ä */}
          <div 
            className="ds-flex-shrink-0 ds-text-center ds-py-3 ds-px-4"
            style={{ 
              backgroundColor: theme.colors.surface,
              color: theme.colors.text,
              borderTop: `1px solid ${theme.colors.primary}20`
            }}
          >
            {/* <p className="ds-text-xs ds-opacity-70">
              –°–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            </p> */}
          </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç DesignTips
export const DesignTips: React.FC<DesignTipsProps> = ({ theme }) => {
  const [activeTip, setActiveTip] = useState<string | null>(null);

  const getTips = () => {
    const tips = [];

    // –ü–æ—Ä–∞–¥–∏ –ø–æ –∫–æ–ª—å–æ—Ä–∞—Ö
    const primaryLuminance = getLuminance(theme.colors.primary);
    const textLuminance = getLuminance(theme.colors.text);
    const backgroundLuminance = getLuminance(theme.colors.background);

    if (Math.abs(primaryLuminance - backgroundLuminance) < 0.3) {
      tips.push({
        id: 'contrast-primary',
        title: '–ù–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç',
        description: '–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–∞ —Ñ–æ–Ω –º–∞—é—Ç—å –Ω–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—ñ–ª—å—à –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ.',
        level: 'warning'
      });
    }

    if (Math.abs(textLuminance - backgroundLuminance) < 0.2) {
      tips.push({
        id: 'contrast-text',
        title: '–ü—Ä–æ–±–ª–µ–º–∞ –∑ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—é',
        description: '–ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É —Ç–∞ —Ñ–æ–Ω—É –º–∞—é—Ç—å –∑–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç. –¶–µ –º–æ–∂–µ —É—Å–∫–ª–∞–¥–Ω–∏—Ç–∏ —á–∏—Ç–∞–Ω–Ω—è –º–µ–Ω—é.',
        level: 'warning'
      });
    }

    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –ø–æ—Ä–∞–¥–∏
    if (Math.abs(primaryLuminance - backgroundLuminance) > 0.5) {
      tips.push({
        id: 'good-contrast',
        title: '–í—ñ–¥–º—ñ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç',
        description: '–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–∞ —Ñ–æ–Ω –º–∞—é—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç. –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î —á—É–¥–æ–≤—É —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –º–µ–Ω—é.',
        level: 'success'
      });
    }

    return tips;
  };

  const getLuminance = (hex: string): number => {
    const rgb = parseInt(hex.slice(1), 16);
    const r = (rgb >> 16) & 0xff;
    const g = (rgb >> 8) & 0xff;
    const b = (rgb >> 0) & 0xff;
    return (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'success': return 'text-green-600 bg-green-50 border-green-200';
      case 'warning': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'info': return 'text-blue-600 bg-blue-50 border-blue-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const tips = getTips();

  return (
    <div className="p-6 bg-white rounded-xl border border-gray-200">
      <div className="mb-4">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –¥–∏–∑–∞–π–Ω—É
        </h3>
        <p className="text-sm text-gray-600">
          –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –≤–∞—à–æ–≥–æ –º–µ–Ω—é
        </p>
      </div>

      {tips.length === 0 ? (
        <div className="text-center py-8">
          <div className="text-4xl mb-2">üéâ</div>
          <p className="text-sm text-gray-600">
            –í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∞—à –¥–∏–∑–∞–π–Ω –≤–∏–≥–ª—è–¥–∞—î —á—É–¥–æ–≤–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.
          </p>
        </div>
      ) : (
        <div className="space-y-3">
          {tips.map((tip) => (
            <div
              key={tip.id}
              className={`p-4 rounded-lg border cursor-pointer transition-all duration-200 ${getLevelColor(tip.level)} ${
                activeTip === tip.id ? 'shadow-md scale-105' : ''
              }`}
              onClick={() => setActiveTip(activeTip === tip.id ? null : tip.id)}
            >
              <div className="flex items-start gap-3">
                <div className="text-lg flex-shrink-0">
                  {tip.level === 'success' ? '‚ú®' : tip.level === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <h4 className="text-sm font-semibold">{tip.title}</h4>
                  </div>
                  <p className="text-sm opacity-90">
                    {tip.description}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó */}
      <div className="mt-6 pt-4 border-t border-gray-200">
        <h4 className="text-sm font-semibold text-gray-900 mb-3">
          –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
        </h4>
        <div className="grid grid-cols-1 gap-3">
          <div className="flex items-start gap-2">
            <span className="text-blue-500">üí°</span>
            <div>
              <p className="text-xs font-medium text-gray-900">–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è</p>
              <p className="text-xs text-gray-600">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ–Ω—é –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-green-500">üì±</span>
            <div>
              <p className="text-xs font-medium text-gray-900">–ú–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å</p>
              <p className="text-xs text-gray-600">–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-purple-500">‚ö°</span>
            <div>
              <p className="text-xs font-medium text-gray-900">–®–≤–∏–¥–∫—ñ—Å—Ç—å</p>
              <p className="text-xs text-gray-600">–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <span className="text-orange-500">üéØ</span>
            <div>
              <p className="text-xs font-medium text-gray-900">–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è</p>
              <p className="text-xs text-gray-600">–í—Ä–∞—Ö–æ–≤—É–π—Ç–µ —Å—Ç–∏–ª—å –≤–∞—à–æ–≥–æ –∑–∞–∫–ª–∞–¥—É</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
