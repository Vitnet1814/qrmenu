'use client';

import React, { createContext, useContext, useState, useEffect } from 'react';

export interface Theme {
  id: string;
  name: string;
  description: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    background: string;
  };
  preview: string;
  category: 'restaurant' | 'cafe' | 'fast-food' | 'bar' | 'modern' | 'premium';
}

interface ThemeContextType {
  currentTheme: Theme;
  setTheme: (theme: Theme) => void;
  setThemeById: (themeId: string) => void;
  availableThemes: Theme[];
  isDarkMode: boolean;
  toggleDarkMode: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

const defaultTheme: Theme = {
  id: 'modern',
  name: '–ú–æ–¥–µ—Ä–Ω',
  description: '–°—É—á–∞—Å–Ω–∞ —Ç–µ–º–∞ –∑ —Å–∏–Ω—ñ–º–∏ —Ç–∞ —Å—ñ—Ä–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤',
  colors: {
    primary: '#1976d2',
    secondary: '#424242',
    accent: '#ff4081',
    background: '#e3f2fd'
  },
  preview: 'üè¢',
  category: 'modern'
};

const themes: Theme[] = [
  {
    id: 'classic-restaurant',
    name: '–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
    description: '–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ —Ç–µ–º–∞ –∑ —Ç–µ–ø–ª–∏–º–∏ –∫–æ—Ä–∏—á–Ω–µ–≤–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –¥–ª—è –∫–ª–∞—Å–∏—á–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤',
    colors: {
      primary: '#8b4513',
      secondary: '#d2691e',
      accent: '#daa520',
      background: '#f5e6d3'
    },
    preview: 'üçΩÔ∏è',
    category: 'restaurant'
  },
  {
    id: 'cozy-cafe',
    name: '–ó–∞—Ç–∏—à–Ω–µ –∫–∞—Ñ–µ',
    description: '–¢–µ–ø–ª–∞ —Ç–∞ –∑–∞—Ç–∏—à–Ω–∞ —Ç–µ–º–∞ –∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ –¥–ª—è –∫–∞—Ñ–µ',
    colors: {
      primary: '#6b4423',
      secondary: '#d4af37',
      accent: '#c9a96e',
      background: '#f4f1eb'
    },
    preview: '‚òï',
    category: 'cafe'
  },
  {
    id: 'fast-food',
    name: '–§–∞—Å—Ç-—Ñ—É–¥',
    description: '–Ø—Å–∫—Ä–∞–≤–∞ —Ç–∞ –µ–Ω–µ—Ä–≥—ñ–π–Ω–∞ —Ç–µ–º–∞ –∑ —á–µ—Ä–≤–æ–Ω–∏–º–∏ —Ç–∞ –∂–æ–≤—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#ff6b35',
      secondary: '#ffd23f',
      accent: '#ff1744',
      background: '#ffe8e0'
    },
    preview: 'üçî',
    category: 'fast-food'
  },
  {
    id: 'sushi-bar',
    name: '–°—É—à–∏-–±–∞—Ä',
    description: '–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ —Ç–µ–º–∞ –∑ –∑–µ–ª–µ–Ω–∏–º–∏ —Ç–∞ —á–µ—Ä–≤–æ–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#2c5530',
      secondary: '#ff6b6b',
      accent: '#4ecdc4',
      background: '#e8f5e8'
    },
    preview: 'üç£',
    category: 'bar'
  },
  {
    id: 'pizzeria',
    name: '–ü—ñ—Ü–µ—Ä—ñ—è',
    description: '–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ —Ç–µ–º–∞ –∑ —á–µ—Ä–≤–æ–Ω–∏–º–∏, –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–º–∏ —Ç–∞ –∑–µ–ª–µ–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏',
    colors: {
      primary: '#d32f2f',
      secondary: '#ff9800',
      accent: '#4caf50',
      background: '#ffebee'
    },
    preview: 'üçï',
    category: 'restaurant'
  },
  {
    id: 'modern',
    name: '–ú–æ–¥–µ—Ä–Ω',
    description: '–°—É—á–∞—Å–Ω–∞ —Ç–µ–º–∞ –∑ —Å–∏–Ω—ñ–º–∏ —Ç–∞ —Å—ñ—Ä–∏–º–∏ —Ç–æ–Ω–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤',
    colors: {
      primary: '#1976d2',
      secondary: '#424242',
      accent: '#ff4081',
      background: '#e3f2fd'
    },
    preview: 'üè¢',
    category: 'modern'
  },
  {
    id: 'dark',
    name: '–¢–µ–º–Ω–∞ —Ç–µ–º–∞',
    description: '–°—Ç–∏–ª—å–Ω–∞ —Ç–µ–º–Ω–∞ —Ç–µ–º–∞ –∑ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–º–∏ —Ç–∞ –±–ª–∞–∫–∏—Ç–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
    colors: {
      primary: '#bb86fc',
      secondary: '#03dac6',
      accent: '#cf6679',
      background: '#121212'
    },
    preview: 'üåô',
    category: 'modern'
  },
  {
    id: 'spring',
    name: '–í–µ—Å–Ω—è–Ω–∞ —Ç–µ–º–∞',
    description: '–°–≤—ñ–∂–∞ —Ç–∞ –∂–∏—Ç—Ç—î—Ä–∞–¥—ñ—Å–Ω–∞ —Ç–µ–º–∞ –∑ –∑–µ–ª–µ–Ω–∏–º–∏ —Ç–∞ –∂–æ–≤—Ç–∏–º–∏ —Ç–æ–Ω–∞–º–∏',
    colors: {
      primary: '#4caf50',
      secondary: '#81c784',
      accent: '#ffb74d',
      background: '#e8f5e8'
    },
    preview: 'üå∏',
    category: 'cafe'
  },
  {
    id: 'premium',
    name: '–ü—Ä–µ–º—ñ—É–º',
    description: '–†–æ–∑–∫—ñ—à–Ω–∞ —Ç–µ–º–∞ –∑ —á–æ—Ä–Ω–∏–º–∏ —Ç–∞ –∑–æ–ª–æ—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∑–∞–∫–ª–∞–¥—ñ–≤',
    colors: {
      primary: '#1a1a1a',
      secondary: '#c9a96e',
      accent: '#d4af37',
      background: '#f5f5f5'
    },
    preview: 'üëë',
    category: 'premium'
  }
];

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState<Theme>(defaultTheme);
  const [isDarkMode, setIsDarkMode] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º–∏ –∑ localStorage –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    const savedThemeId = localStorage.getItem('qr-menu-theme');
    const savedDarkMode = localStorage.getItem('qr-menu-dark-mode') === 'true';
    
    if (savedThemeId) {
      const theme = themes.find(t => t.id === savedThemeId);
      if (theme) {
        setCurrentTheme(theme);
      }
    }
    
    setIsDarkMode(savedDarkMode);
  }, []);

  // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  useEffect(() => {
    const root = document.documentElement;
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è data-theme –∞—Ç—Ä–∏–±—É—Ç–∞
    root.setAttribute('data-theme', currentTheme.id);
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è CSS –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –∫–æ–ª—å–æ—Ä—ñ–≤
    Object.entries(currentTheme.colors).forEach(([key, value]) => {
      root.style.setProperty(`--color-${key}`, value);
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if (isDarkMode) {
      root.setAttribute('data-theme', 'dark');
    }
  }, [currentTheme, isDarkMode]);

  const setTheme = (theme: Theme) => {
    setCurrentTheme(theme);
    localStorage.setItem('qr-menu-theme', theme.id);
  };

  const setThemeById = (themeId: string) => {
    const theme = themes.find(t => t.id === themeId);
    if (theme) {
      setTheme(theme);
    }
  };

  const toggleDarkMode = () => {
    const newDarkMode = !isDarkMode;
    setIsDarkMode(newDarkMode);
    localStorage.setItem('qr-menu-dark-mode', newDarkMode.toString());
  };

  const value: ThemeContextType = {
    currentTheme,
    setTheme,
    setThemeById,
    availableThemes: themes,
    isDarkMode,
    toggleDarkMode
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

// –•—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É —Ç–µ–º–∏
export const useThemeColor = (colorKey: keyof Theme['colors']): string => {
  const { currentTheme } = useTheme();
  return currentTheme.colors[colorKey];
};

// –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞ —î —Ç–µ–º–Ω–æ—é
export const useIsDarkTheme = (): boolean => {
  const { currentTheme } = useTheme();
  return currentTheme.id === 'dark';
};

export default ThemeProvider;
